// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/blog/backend-prisma-typescript-orm-with-postgresql-auth-mngp1ps7kip4

generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String             @default("")
  email             String             @unique @default("")
  password          String?
  hashedToken       String?
  roles             UserRole[]
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime           @updatedAt
  emailVerified     DateTime?
  accounts          Account[]
  image             String?
  externalId        String?
  sessions          Session[]
  selfIntroductions SelfIntroduction[]
  userResume        UserResume[]
  interviews        Interview[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model SelfIntroduction {
  id        String    @id @default(cuid())
  userId    String
  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt
  video     String
  audio     String
  text      String?

  user User @relation(fields: [userId], references: [id])
}

model UserResume {
  id              String    @id @default(cuid())
  userId          String
  filePath        String
  resumeContent   String?
  userContent     String?
  suggestionOne   String?
  suggestionTwo   String?
  suggestionThree String?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Users Table
// Interviews Table
model Interview {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  stack         Stack       @relation(fields: [stackId], references: [id])
  stackId       String // Allow optional stack (for custom interviews) 
  interviewDate DateTime    @default(now())
  roleType      RoleType    @default(FRONTEND) // Enum
  difficulty    Difficulty? // Enum, if using
  notes         String?

  questions Question[]
  Answer    Answer[]
}

// Stack Table (Assuming you have this defined elsewhere)

model Stack {
  id           String              @id @default(cuid())
  stackName    String
  description  String
  isEnabled    Boolean             @default(false)
  type         RoleType            @default(FRONTEND) // Enum
  technologies TechnologyOnStack[]
  Interview    Interview[]

  @@map("Stacks")
}

model Technology {
  id       String              @id @default(cuid())
  techName String
  category String
  stacks   TechnologyOnStack[]

  @@map("Technologies")
}

model TechnologyOnStack {
  stack      Stack      @relation(fields: [stackId], references: [id])
  stackId    String // Foreign key to Stack
  technology Technology @relation(fields: [techId], references: [id])
  techId     String // Foreign key to Technology

  @@id([stackId, techId])
  @@map("Stack_Technologies")
}

// Questions Table
model Question {
  id           String       @id @default(cuid())
  text         String
  duration     String?
  questionType QuestionType @default(TEXT)
  difficulty   Difficulty? // Enum, if using

  answers    Answer[]
  interviews Interview[]
}

// Answer Table
model Answer {
  id          String    @id @default(cuid())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId String
  answerValue String
  duration    String?
}

// Enums
enum RoleType {
  FRONTEND
  BACKEND
  FULLSTACK
}

enum QuestionType {
  TEXT
  CODE_CHALLENGE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
